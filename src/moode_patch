<?php
/*
 * SPDX-License-Identifier: GPL-3.0-or-later
 * Copyright 2014 The moOde audio player project / Tim Curtis
 * Copyright 2013 The tsunamp player ui / Andrea Coiutti & Simone De Gregori
*/

require_once __DIR__ . '/common.php';
require_once __DIR__ . '/alsa.php';
require_once __DIR__ . '/audio.php';
require_once __DIR__ . '/cdsp.php';
require_once __DIR__ . '/music-library.php';
require_once __DIR__ . '/session.php';
require_once __DIR__ . '/sql.php';

// NOTE: Session vars and cfg_mpd updates should be made upstream before this function is called
function updMpdConf() {
    $data  = "#########################################\n";
    $data .= "# This file is managed by moOde          \n";
    $data .= "#########################################\n\n";

    $cfgMpd = sqlQuery("SELECT param, value FROM cfg_mpd WHERE value!=''", sqlConnect());

    foreach ($cfgMpd as $cfg) {
        switch ($cfg['param']) {
            case 'device':
                $cardNum = $cfg['value'];
                break;
            case 'dop':
                $dop = $cfg['value'];
                break;
            case 'stop_dsd_silence':
                $stopDsdSilence = $cfg['value'];
                break;
            case 'thesycon_dsd_workaround':
                $thesyconDsdWorkaround = $cfg['value'];
                break;
            case 'mixer_type':
                $mixerType = $cfg['value'];
                break;
            case 'input_cache':
                $inputCache = $cfg['value'];
                break;
            case 'audio_output_format':
                $data .= $cfg['value'] == 'disabled' ? '' : $cfg['param'] . " \"" . $cfg['value'] . "\"\n";
                break;
            case 'sox_quality':
                $soxQuality = $cfg['value'];
                break;
            case 'sox_multithreading':
                $soxMultithreading = $cfg['value'];
                break;
            case 'replay_gain_handler':
                $replayGainHandler = $cfg['value'];
                break;
            // ALSA: Only used if not default 500000 microseconds
            case 'buffer_time':
                $bufferTimeDefault = '500000';
                $bufferTime = $cfg['value'];
                break;
            // Not used
            case 'period_time':
                $periodTime = $cfg['value'];
                break;
            case 'auto_resample': // Not used
                $autoResample = $cfg['value'];
                break;
            case 'auto_channels': // Not used
                $autoChannels = $cfg['value'];
                break;
            case 'auto_format': // Not used
                $autoFormat = $cfg['value'];
                break;
            // SoX options
            case 'sox_precision':
                $soxPrecision = $cfg['value'];
                break;
            case 'sox_phase_response':
                $soxPhaseResponse = $cfg['value'];
                break;
            case 'sox_passband_end':
                $soxPassbandEnd = $cfg['value'];
                break;
            case 'sox_stopband_begin':
                $soxStopbandBegin = $cfg['value'];
                break;
            case 'sox_attenuation':
                $soxAttenuation = $cfg['value'];
                break;
            case 'sox_flags':
                $soxFlags = $cfg['value'];
                break;
            case 'selective_resample_mode':
                $data .= $cfg['value'] != '0' ? $cfg['param'] . " \"" . $cfg['value'] . "\"\n" : '';
                break;
            case 'proxy':
                $proxy = $cfg['value'];
                break;
            case 'proxy_user':
                $proxyUser = $cfg['value'];
                break;
            case 'proxy_password':
                $proxyPassword = $cfg['value'];
                break;
            // Default param handling
            default:
                $data .= $cfg['param'] . " \"" . $cfg['value'] . "\"\n";
                break;
        }
    }

    // MPD mixer type
    $outputIface = getAudioOutputIface($_SESSION['cardnum']);
    if ($_SESSION['alsavolume'] == 'none') {
        if ($outputIface == AO_USB ||
            $outputIface == AO_HDMI ||
            $outputIface == AO_TRXSEND ||
            $mixerType == 'null' || // CamillaDSP
            $mixerType == 'none') { // Fixed (0dB)
            // NOP: Leave mixer type as-is
        } else {
            // Revert to software mixer
            $mixerType = 'software';
            $result = sqlQuery("UPDATE cfg_mpd SET value='software' WHERE param='mixer_type'", sqlConnect());
        }
    }
    phpSession('write', 'mpdmixer', $mixerType);

    // Ensure mpdmixer_local = mpdmixer
    if ($_SESSION['audioout'] == 'Local') {
        phpSession('write', 'mpdmixer_local', $mixerType);
    }

    // Hardware mixer (if any)
    if ($outputIface == AO_TRXSEND || $_SESSION['alsa_output_mode'] != 'iec958') {
        $hwMixer = 'hw:' . $cardNum;
    } else {
        $hwMixer = getAlsaIEC958Device();
    }

    // Input
    $data .= "max_connections \"128\"\n";
    $data .= "\n";
    $data .= "decoder {\n";
    $data .= "plugin \"ffmpeg\"\n";
    $data .= "enabled \"yes\"\n";
    $data .= "}\n\n";
    $data .= "input {\n";
    $data .= "plugin \"curl\"\n";
    $data .= "proxy \"" . $proxy . "\"\n";
    $data .= "proxy_user \"" . $proxyUser . "\"\n";
    $data .= "proxy_password \"" . $proxyPassword . "\"\n";
    $data .= "}\n\n";

    // Input cache
    if ($inputCache != 'Disabled') {
        $data .= "input_cache {\n";
        $data .= "size \"" . $inputCache . "\"\n";
        $data .= "}\n\n";
    }

    // Resampler
    $data .= "resampler {\n";
    $data .= "plugin \"soxr\"\n";
    $data .= "quality \"" . $soxQuality . "\"\n";
    $data .= "threads \"" . $soxMultithreading . "\"\n";
    if ($soxQuality == 'custom') {
        $data .= "precision \"" . $soxPrecision . "\"\n";
        $data .= "phase_response \"" . $soxPhaseResponse . "\"\n";
        $data .= "passband_end \"" . $soxPassbandEnd . "\"\n";
        $data .= "stopband_begin \"" . $soxStopbandBegin . "\"\n";
        $data .= "attenuation \"" . $soxAttenuation . "\"\n";
        $data .= "flags \"" . $soxFlags . "\"\n";
    }
    $data .= "}\n\n";

    // ALSA default
    $data .= "audio_output {\n";
    $data .= "type \"alsa\"\n";
    $data .= "name \"" . ALSA_DEFAULT . "\"\n";
    $data .= "device \"_audioout\"\n";
    $data .= "mixer_type \"" . $mixerType . "\"\n";
    $data .= $mixerType == 'hardware' ?
        "mixer_control \"" . $_SESSION['amixname'] . "\"\n" .
        "mixer_device \"" . $hwMixer . "\"\n" .
        "mixer_index \"0\"\n" :
        '';
    $data .= "dop \"" . $dop . "\"\n";
    $data .= "stop_dsd_silence \"" . $stopDsdSilence . "\"\n";
    $data .= "thesycon_dsd_workaround \"" . $thesyconDsdWorkaround . "\"\n";
    $data .= $bufferTime == $bufferTimeDefault ? '' : "buffer_time \"" . $bufferTime . "\"\n";
    $data .= "}\n\n";

    // ALSA bluetooth
    $data .= "audio_output {\n";
    $data .= "type \"alsa\"\n";
    $data .= "name \"" . ALSA_BLUETOOTH . "\"\n";
    //$data .= "device \"btstream\"\n";
    $data .= "device \"_audioout\"\n";
    $data .= "mixer_type \"software\"\n";
    $data .= "}\n\n";

    // HTTP server
    $data .= "audio_output {\n";
    $data .= "type \"httpd\"\n";
    $data .= "name \"" . HTTP_SERVER . "\"\n";
    $data .= "port \"" . $_SESSION['mpd_httpd_port'] . "\"\n";
    $data .= "encoder \"" . $_SESSION['mpd_httpd_encoder'] . "\"\n";
    $data .= $_SESSION['mpd_httpd_encoder'] == 'flac' ? "compression \"0\"\n" : "bitrate \"320\"\n";
    $data .= "tags \"yes\"\n";
    $data .= "always_on \"yes\"\n";
    $data .= $_SESSION['mpd_httpd_encoder'] == 'lame' ? "format \"44100:16:2\"\n" : '';
    $data .= "}\n\n";

    // Stream recorder
    if (($_SESSION['feat_bitmask'] & FEAT_RECORDER) && $_SESSION['recorder_status'] != 'Not installed') {
        include '/var/www/inc/recorder-mpd.php';
    }

    // Developer tweak for maintaining custom mpd.conf settings
    if ($_SESSION['feat_bitmask'] & FEAT_DEVTWEAKS) {

        // 1) If there's a file for mpd_oled FIFO, append it to $data
        if (file_exists('/usr/local/etc/mpd_oled_fifo.conf')) {
            $data .= file_get_contents('/usr/local/etc/mpd_oled_fifo.conf');
        }

        // 2) Write the final data (including mpd_oled_fifo lines) to mpd.moode.conf
        $fh = fopen('/etc/mpd.moode.conf', 'w');
        fwrite($fh, $data);
        fclose($fh);

        // 3) Merge /etc/mpd.moode.conf with /etc/mpd.custom.conf
        sysCmd("/var/www/util/mpdconf_merge.py /etc/mpd.moode.conf /etc/mpd.custom.conf");

    } else {
        // Normal else path if dev tweaks are off
        $fh = fopen('/etc/mpd.conf', 'w');
        fwrite($fh, $data);
        fclose($fh);
    }

    // Update ALSA and Bluetooth confs
    updAudioOutAndBtOutConfs($cardNum, $_SESSION['alsa_output_mode']);
    updDspAndBtInConfs($cardNum, $_SESSION['alsa_output_mode']);

    // Update output device cache
    updOutputDeviceCache($_SESSION['adevname']);
}


// Change to different MPD mixer type
function changeMPDMixer($mixer) {
    //workerLog('changeMPDMixer(): mixer=' . $mixer);
    $mixerType = $mixer == 'camilladsp' ? 'null' : $mixer;

    sqlUpdate('cfg_mpd', sqlConnect(), 'mixer_type', $mixerType);
    phpSession('write', 'mpdmixer', $mixerType);
    if ($_SESSION['alsavolume'] != 'none' && $mixerType != 'hardware') {
        setALSAVolTo0dB($_SESSION['alsavolume_max']);
    }
    if ($_SESSION['camilladsp'] != 'off' && $mixer != 'camilladsp') {
        CamillaDSP::setCDSPVolTo0dB();
    }

    updMpdConf();
}

// Ensure valid mpd output config
function configMpdOutput() {
    $mpdOutput = $_SESSION['audioout'] == 'Bluetooth' ? ALSA_BLUETOOTH : ALSA_DEFAULT;
    return $mpdOutput;
}

// Get MPD ouputs for logging
function getMpdOutputs($sock) {
    sendMpdCmd($sock, 'outputs');
    $resp = readMpdResp($sock);

    $array = array();
    $line = strtok($resp, "\n");

    while ($line) {
        list ($element, $value) = explode(": ", $line, 2);

        if ($element == 'outputid') {
            $id = $value;
        }
        if ($element == 'outputname') {
            if ($value == 'ALSA Default') {
                $value = 'ALSA Default:   ';
            } else if ($value == 'ALSA Bluetooth') {
                $value = 'ALSA Bluetooth: ';
            } else if ($value == 'HTTP Server') {
                $value = 'HTTP Server:    ';
            } else if ($value == 'Stream Recorder') {
                $value = 'recorder:       ';
            }
            $array[$id] .= $value;
        }
        if ($element == 'outputenabled') {
            $array[$id] .= $value == '0' ? 'off' : 'on';
        }

        $line = strtok("\n");
    }

    return $array;
}

// Scan the network for hosts with open port 6600 (MPD) and return list of IP addresses
function scanForMPDHosts($retryCount = 2) {
    $thisIpAddr = getThisIpAddr();
    $subnet = substr($thisIpAddr, 0, strrpos($thisIpAddr, '.'));
    $port = '6600';

    for ($i = 0; $i < $retryCount; $i++) {
        sysCmd('nmap -Pn -p' . $port . ' --open ' . $subnet . '.0/24 -oG /tmp/mpd_nmap.scan >/dev/null');
        $ipAddresses = sysCmd('cat /tmp/mpd_nmap.scan | grep "' . $port . '/open" | cut -f 1 | cut -d " " -f 2');
        if (!empty($ipAddresses)) {
            break;
        }
    }

    return $ipAddresses;
}

// Low-level MPD socket routines
function getMpdSock() {
    if (false === ($sock = openMpdSock('localhost', 6600))) {
        debugLog('getMpdSock(): Connection to MPD failed');
        exit(0);
    } else {
        return $sock;
    }
}
function openMpdSock($host, $port) {
    $retryCount = 6;
    for ($i = 0; $i < $retryCount; $i++) {
        if (false === ($sock = @stream_socket_client('tcp://' . $host . ':' . $port, $errorno, $errorstr, 30))) {
            debugLog('openMpdSock(): Error: connection failed (' . ($i + 1) . ') ' . $errorno . ', ' . $errorstr);
        } else {
            $resp = readMpdResp($sock);
            break;
        }

        usleep(500000); // .5 secs
    }

    return $sock;
}
function readMpdResp($sock) {
    $resp = '';

    while (false !== ($str = fgets($sock, 1024)) && !feof($sock)) {
        if (strncmp(MPD_RESPONSE_OK, $str, strlen(MPD_RESPONSE_OK)) == 0) {
            $resp = $resp == '' ? $str : $resp;
            return $resp;
        }

        if (strncmp(MPD_RESPONSE_ERR, $str, strlen(MPD_RESPONSE_ERR)) == 0) {
            $msg = 'readMpdResp(): Error: response $str[0]=(' . explode("\n", $str)[0] . ')';
            debugLog($msg);
            return $msg;
        }

        $resp .= $str;
    }

    if (!feof($sock)) {
        // Socket timed out or PHP/MPD connection failure
        debugLog('readMpdResp(): Error: fgets failure (' . explode("\n", $resp)[0] . ')');
    }

    return $resp;
}
function closeMpdSock($sock) {
    sendMpdCmd($sock, 'close');
    fclose($sock);
}

// Send command(s) to MPD
function sendMpdCmd($sock, $cmd) {
    fputs($sock, $cmd . "\n");
}
function chainMpdCmds($sock, $cmds) {
    sendMpdCmd($sock, 'command_list_begin');
    foreach ($cmds as $cmd) {
        sendMpdCmd($sock, $cmd);
    }
    sendMpdCmd($sock, 'command_list_end');
    $resp = readMpdResp($sock);
}

// Get MPD status and stats
function getMpdStatus($sock) {
    sendMpdCmd($sock, 'status');
    $resp = readMpdResp($sock);
    return formatMpdStatus($resp);
}
function getMpdStats($sock) {
    sendMpdCmd($sock, 'stats');
    $resp = readMpdResp($sock);
    return parseDelimFile($resp, ': ');
}

// The rest of the file (omitted for brevity) includes getCurrentSong(), formatMpdStatus(), etc. 
// which you already have in your snippet. 
// End of mpd.php
